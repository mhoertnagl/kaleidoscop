use std::str::FromStr;

use crate::ast::Unit;
use crate::ast::Stmt;
use crate::ast::Expr;
use crate::ast::Opcode;

grammar;

// https://github.com/Storyyeller/cubiml-demo/blob/master/src/grammar.lalr
// #[inline]
// Comma<T>: Vec<T> = {
//   <i1: T> <i2:("," T)*> => {
//     let mut items = vec![i1];
//     items.extend(i2.into_iter().map(|e| e.1));
//     items
//   }
// };

// #[inline]
// Comma<T>: Vec<T> = {
//   <v:(<T> ",")*> <e:T?> => match e {
//       None => v,
//       Some(e) => {
//           let mut v = v;
//           v.push(e);
//           v
//       }
//   }
// };

pub Unit: Unit = {
  <stmts:Stmt*> => Unit::Body{ stmts }
};

Stmt: Stmt = {
  <expr:Expr> "." =>
    Stmt::Expr(expr),
}

Expr: Box<Expr> = {
  ImplicationExpr,
};

ImplicationExpr: Box<Expr> = {
  <left:ImplicationExpr> <op:ImplicationExprOp> <right:OrExpr> =>
    Box::new(Expr::BinOp{ left, op, right }),

  OrExpr,
};

ImplicationExprOp: Opcode = {
  "→"   => Opcode::Impl,
  "↔"   => Opcode::BiImpl,
  "->"  => Opcode::Impl,
  "<->" => Opcode::BiImpl,
  "=>"  => Opcode::Impl,
  "<=>" => Opcode::BiImpl,
};

OrExpr: Box<Expr> = {
  <left:OrExpr> <op:OrExprOp> <right:AndExpr> =>
    Box::new(Expr::BinOp{ left, op, right }),

    AndExpr,
};

OrExprOp: Opcode = {
  "∨"   => Opcode::Or,
  "↓"   => Opcode::Nor,
  "≡"   => Opcode::NotXor,
  "≢"   => Opcode::Xor,
  // "===" => Opcode::NotXor,
  // "!==" => Opcode::Xor,
};

AndExpr: Box<Expr> = {
  <left:AndExpr> <op:AndExprOp> <right:NegExpr> =>
    Box::new(Expr::BinOp{ left, op, right }),

  NegExpr,
};

AndExprOp: Opcode = {
  "∧" => Opcode::And,
  "↑" => Opcode::Nand,
};

NegExpr: Box<Expr> = {
  "¬" <e:Term> => Box::new(Expr::Neg(<>)),
  Term,
};

Term: Box<Expr> = {
  "(" <e:Expr> ")" => <>,
  // "¬" <e:Expr>     => Box::new(Expr::Neg(<>)),
  Id               => Box::new(Expr::Id(<>)),
};

Id: String = {
  r"[a-zA-Z0-9]+" => <>.to_string(),
  "⊤"             => <>.to_string(),
  "⊥"             => <>.to_string(),
};

match {
  r"\s*"               => {},
  r"//[^\n\r]*[\n\r]*" => {},
  _,
} 

// http://lalrpop.github.io/lalrpop/tutorial/005_building_asts.html
use std::str::FromStr;
use crate::ast::*;

grammar;

// #[inline]
// Comma<T>: Vec<T> = {
//   <v:(<T> ",")*> <e:T?> => match e {
//       None => v,
//       Some(e) => {
//           let mut v = v;
//           v.push(e);
//           v
//       }
//   }
// };

#[inline]
Comma<T>: Vec<T> = {
  <i1: T> <i2:("," T)*> => {
    let mut items = vec![i1];
    items.extend(i2.into_iter().map(|e| e.1));
    items
  }
};

pub Module: Module = {
  <ss:Statement*> => Module {
    statements: ss,
  },
};

Statement: Statement = {
  "let" <n:Id> "=" <e:Expr> ";" =>
    Statement::Let(LetStatement::new(n, e)),

  "def" <n:Id> "(" <ps:Comma<Id>?> ")" <ss:Statement*> "end" =>
    Statement::Def(DefStatement::new(n, ps, ss)),

  <n:Id> "=" <e:Expr> ";" =>
    Statement::Assign(AssignStatement::new(n, e)),

  // TODO: Acuatlly function call is enough.
  <e:Expr> ";" =>
    Statement::Expr(ExprStatement::new(e)),

  "if" <cond:Expr> "then" <cons:Statement*> "else" <alt:Statement*> "end" =>
    Statement::If(IfStatement::new(cond, cons, alt)),

  "return" <e:Expr> ";" =>
    Statement::Return(ReturnStatement::new(e)),
}

  // "print" <e:Expr> => Statement::Expr {
  //   expr: e,
  // },

Expr: Box<Expr> = {
  <l:Expr> <op:ExprOp> <r:Factor> =>
    Box::new(Expr::BinOp(BinOpExpr::new(l, op, r))),

  Factor,
};

ExprOp: Opcode = {
  "+" => Opcode::Add,
  "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
  <l:Factor> <op:FactorOp> <r:Term> =>
    Box::new(Expr::BinOp(BinOpExpr::new(l, op, r))),

  Term,
};

FactorOp: Opcode = {
  "*" => Opcode::Mul,
  "/" => Opcode::Div,
};

Term: Box<Expr> = {
  <a:Atom> => Box::new(Expr::Atom(<>)),
  //FunCall => <>,
  "(" <e:Expr> ")" => e,
};

// FunCall: Box<Expr> = {
//   <n:Id> "(" <args:Comma<Expr>?> ")" =>
//     Box::new(Expr::FunCall(FunCallExpr::new(n, args))),
// };

Atom: Atom = {
  Num => Atom::Num(<>),
  Id => Atom::Id(<>),
};

Num: u64 = {
  r"[0-9]+" => u64::from_str(<>).unwrap(),
};

Id: String = {
  r"[a-zA-Z][a-zA-Z0-9]*" => String::from(<>),
};

// Num: f64 = {
//   r"-?[0-9]+" => f64::from_str(<>).unwrap(),
//   r"-?[0-9]*\.[0-9]*" => f64::from_str(<>).unwrap()
// };

match {
  "let",
  "def",
  "if",
  "then",
  "else",
  "end",
  "return",
  "(",
  ")",
  ",",
  ";",
  "=",
  "+",
  "-",
  "*",
  "/",
  r"[0-9]+",
  r"[a-zA-Z][a-zA-Z0-9]*",
} else {
  r"\s*" => { },
  r"#[^\n\r]*[\n\r]*" => { },
} 